// Code generated by go-bindata.
// sources:
// html/index.html
// html/main.css
// html/main.js
// html/png/pixel.png
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x31\x4f\xc3\x30\x14\x84\xf7\xfc\x8a\xc7\x9b\x09\x16\x1b\x83\x1d\x09\x95\x0e\x4c\x30\x14\x09\x46\xd7\xb9\x92\x47\x6d\x27\xd8\xaf\x2d\xfd\xf7\x48\x4d\x2b\x65\xb2\xee\x3e\xdd\x59\xef\xec\xdd\xcb\xdb\x6a\xf3\xf5\xbe\xa6\x41\x53\xec\x1a\x7b\x7b\xe0\xfb\xae\x21\x22\xb2\x09\xea\x29\x0c\xbe\x54\xa8\xe3\x83\xee\xda\x27\x26\xb3\x84\x83\xea\xd4\xe2\xf7\x20\x47\xc7\x9f\xed\xc7\x73\xbb\x1a\xd3\xe4\x55\xb6\x11\x4c\x61\xcc\x8a\xac\x8e\x5f\xd7\x0e\xfd\x37\xf8\x9a\x54\xd1\x88\x6e\x9d\xbc\x44\xda\x14\x1f\xf6\x28\xd6\xcc\xe6\xa2\x3a\xfb\x04\xc7\x47\xc1\x69\x1a\x8b\x2e\xda\x4e\xd2\xeb\xe0\x7a\x1c\x25\xa0\xbd\x88\x7b\x92\x2c\x2a\x3e\xb6\x35\xf8\x08\xf7\x78\xfb\x29\x4a\xde\x53\x41\x74\x5c\xf5\x1c\x51\x07\x40\x99\xf4\x3c\xc1\xb1\xe2\x4f\x4d\xa8\x95\x29\xa1\x17\xef\xb8\x86\x02\x64\xa6\xa1\x60\xe7\x38\x79\xc9\x0f\x17\x7c\x3b\xb8\x86\x22\x93\x52\x2d\xe1\x4a\x7f\x2a\x77\xd6\xcc\x76\xd7\x58\x33\x2f\x67\xb7\x63\x7f\x9e\x23\x8d\x35\xb3\xb0\xe6\x32\xee\x7f\x00\x00\x00\xff\xff\xc1\x68\x62\xdb\x73\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func mainCssBytes() ([]byte, error) {
	return bindataRead(
		_mainCss,
		"main.css",
	)
}

func mainCss() (*asset, error) {
	bytes, err := mainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func mainJsBytes() ([]byte, error) {
	return bindataRead(
		_mainJs,
		"main.js",
	)
}

func mainJs() (*asset, error) {
	bytes, err := mainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pngPixelPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x60\x04\x61\x0e\x36\x06\x06\x06\x79\xd1\x23\x9d\x0c\x0c\x0c\x6c\x49\xde\xee\x2e\x0c\xff\x41\x70\xc1\xde\xe5\x93\x19\x18\x18\x38\x0b\x3c\x22\x8b\x19\x18\xb8\x85\x41\x98\x91\x61\xd6\x1c\x09\x06\x06\x06\xf6\x12\x4f\x5f\x57\xf6\x47\x3c\xfc\x7c\xe2\x0c\xac\xd7\x5c\x1e\x31\x30\x30\x70\x7b\xba\x38\x86\x70\x5c\x4f\xfe\xc1\xcf\xc2\xc0\xf9\x9b\xf9\x6f\xb2\xda\xd1\x7e\x06\x06\x06\x06\x4f\x57\x3f\x97\x75\x4e\x09\x4d\x80\x00\x00\x00\xff\xff\x83\x85\x3a\xf2\x7e\x00\x00\x00")

func pngPixelPngBytes() ([]byte, error) {
	return bindataRead(
		_pngPixelPng,
		"png/pixel.png",
	)
}

func pngPixelPng() (*asset, error) {
	bytes, err := pngPixelPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "png/pixel.png", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":    indexHtml,
	"main.css":      mainCss,
	"main.js":       mainJs,
	"png/pixel.png": pngPixelPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"main.css":   &bintree{mainCss, map[string]*bintree{}},
	"main.js":    &bintree{mainJs, map[string]*bintree{}},
	"png": &bintree{nil, map[string]*bintree{
		"pixel.png": &bintree{pngPixelPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
